单例模式：
添加静态private自己类
getInstance静态公有函数获得它
在Start()函数里写instance = this;

数据类型：
ParticleEmitter		粒子系统
Transform		位置相关
Rigidbody		刚体
Vector3			表示前后上方向，如Vector3.forward表示向前


常用的游戏对象中的变量：
velocity			速度
transform.position		位置
transform.rotation		旋转
transform.rotation.eulerAngles	欧拉角度，对应的是可视界面上的角度


常用函数：
Input.GetKeyDown(KeyCode.Return)	//按下回车键
Input.GetKey(KeyCode.Return)		//按住回车键
！！前面2个函数在跨平台的时候不能用，推荐使用下面这种函数
Input.GetButton("Jump")			//按下跳键，PC机默认是空格
Input.GetAxis ("Vertical") 		//获得垂直轴力度，按下w键或者↑会到1，按下s键或↓会到-1
Instantiate				//复制游戏对象（但是必须是perfab）
Destroy(gameObject)			//销毁当前脚本所附在的游戏对象，切记，不能删除其他的游戏对象，否则出错
yield WaitForSeconds (3)		//等待3秒钟，参数是float的
transform.Translate(Vector3.forward * Time.deltaTime)	//Vector只能乘以float，不能是double，若自己写个小数必须写成0.01f这样的

骨骼动画：
Animation：骨骼动画控件，放在unity面板上，在脚本中获取它并用它播放骨骼动画，脚本中所播放的骨骼动画片段必须在Animation中存在！
AnimationClip：骨骼动画片段，在unity中对美工做好的骨骼动画序列进行拆分得到
_animation.CrossFade(loseBalanceAnimation.name);	//播放失衡动画
_animation[jumpPoseAnimation.name].speed;		//修改某个动画片段的播放速度
_animation[loseBalanceAnimation.name].layer = 2		//设置失衡动画的层，可以同时和其他动画一起播

常用事件：
function OnCollisionEnter(collision : Collision) {}	//进入碰撞区域
OnMouseDown()	//鼠标点击事件，将这个写在脚本中，再拖动到想要响应点击事件的对象上，则可以实现对鼠标点击事件的响应

GUI部分：
	固定贴图：使用GUITexture控件，图片拖拽上去，再在面板中调整图片大小、位置等
	动态生成图：
GUI.Window函数创建窗口，GUILayout.Label在创建的窗口上面画东西或者写东西
GUI.skin指定对话框皮肤，皮肤是在Project中右键Create选择GUI Skin创建的（指定skin之后默认的皮肤就会消失）
	其他：
OnGUI函数是重绘GUI必定执行的，绘制窗口必须在这里执行
GUI.skin是设置窗口的皮肤
GUI.Window是显示窗口，显示的窗口是在skin里设置的，包括贴图什么的
GUI Skin是在Project中右键新建GUI Skin创建的，之后在脚本里写一个public GUISkin skin;再将创建的这个skin拖动上去就好了
最重要：
在类中定义public的GUIStyle变量，在unity面板中对其修改，包括各种（一般、鼠标经过、点下等）背景图片、字体等（字的颜色在修改背景隔壁，而不是通过字的材质改），用于绘制GUI相关组件时作为函数参数使用
GUILayout.Label可以在这个窗口的相对位置打字
GUILayout.BeginVertical();后面写的都是在这一行
GUILayout.BeginHorizontal();后面一次写一行
GUILayout.EndHorizontal();结束一次写一行这种方式
GUILayout.BeginArea(*****);限定用GUI绘制文字、按钮等内容的位置！！！This function is very useful when mixing GUILayout code.后面必须有EndArea函数
GUILayout.Space(5);空5格

使用billboard技术：
Unity里没有现成的billboard组件，可以利用粒子系统实现，具体见地震逃生游戏千斤顶上面的箭头

触发器：
Box Collider中的Is Trigger勾选
脚本中void OnTriggerEnter(Collider other)事件是进入该区域的时间

禁用某个GameObject或禁用某个Component：
gameObject.active = false;	//禁用这个脚本所附加在的GameObject
movSreenRef.GetComponent<ScriptName>().enabled = false;	//将某个GameObject上的某个Component禁用

遍历数组：
MeshRenderer[] schoolbagMesh =……
foreach(MeshRenderer temp in schoolbagMesh)……

摄像机使用技巧：
加入判断if(Physics.Linecast (target.position, position, out hit))，可以避免在玩家-墙-摄像机导致看不到玩家这种情况
注意：
1、在U3D面板中将玩家和不需要判断的GameObject的layer选择Ignore Raycast，否则玩家跑快了会自己挡住自己！！
2、所有的透明的触发器虽然把MeshRenderer取消了，但还带碰撞体，所以也必须勾选Ignore Raycast

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
移动平台相关操作：
触摸屏幕：
if (Input.touchCount > 0)...

判断摸到某个HUD响应事件：
if (Input.touchCount > 0 && Input.GetTouch(0).phase == TouchPhase.Began && guiTexture.HitTest(Input.GetTouch(0).position))
	OnMouseDown();
PS：OnMouseDown函数对应的是PC版的鼠标点中该HUD的响应，该段代码仅适合单点触摸

判断摸到场景中某个GameObject的响应：
见Input.GetTouch函数的最后一个例子，利用物理库的RayCast进行判定
PS：能响应的GameObject必须带有碰撞体

触摸滑动：
利用Input.GetTouch获得Touch，其中的deltaPosition可用于判断向屏幕哪边滑
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

其他：
1、如果用cube套着一个子弹作为perfab，且在作为perfab之前Mesh Render没取消，那么取消之后必须更新perfab才会起作用（切记，复制的物体属性和perfab是一样的）
2、使用另一个GameObject中的script定义的变量
objectA = GameObject.find("ObjectA")
var script : ScriptName = objectA.GetComponent(ScriptName);
3、GUI.depth用在OnGUI函数中，在绘制之前确定要绘制的深度
4、Vector3 dir = Vector3.Lerp(transform.position, target.transform.position, Time.deltaTime * moveSpeed);可以使得一个物体从某一位置移动到另一位置，并且速度会变慢
5、枚举类型的定义要放在类的外面才可以被其他类访问到，否则即使用了public也是白搭
6、淡入淡出效果：每次绘制一幅黑色的图，alpha值会变而已，具体见地震demo项目
7、添加美术资源后框上所有的部分，添加mesh collider即可（或者添加box collider，即可在外面添加一个方块碰撞）
8、CharacterController可以实现人物的控制，并且自带刚体
9、如何获得一个GameObject的子对象：
Transform[] allChildren = parent.GetComponentsInChildren<Transform>();
foreach (Transform child in allChildren){
     //child.gameObject
}
10、强制设置分辨率并去除unity标志方法：Edit > Project Settings > Player中的Display Resolution Dialog可以禁止出现选择分辨率画面；开启专业版后在上述路径中的Other Setting中有个Static Batching会自动勾选，勾选之后就不会出现那种标志
11、在unity面板中输入string的时候换行：在记事本中打好已换行的字复制粘贴到unity面板中
12、若调用的某个函数里有用yield进行延时，则在外层套一个StartCoroutine函数则可用使其立即返回，调用它的函数不会阻塞
13、Resources.LoadAssetAtPath函数可以利用路径来加载资源


看完用Unity3D做2D游戏的视频总结：
1、变换位置可以用Translate结合
2、rigidbody可以取消重力和碰撞效果，仅用于触发器事件
3、需要延时的地方可以用延时函数，不必自己在那里搞几个判断计时，具体见第六点
4、场景跳转后静态变量会保存，考虑用它来保存场景间的数据
5、GameObject里的Plane可以创建2D游戏的背景
6、若调用的某个函数里有用yield进行延时，则在外层套一个StartCoroutine函数则可用使其立即返回，调用它的函数不会阻塞;在循环语句中yield return 0;可以达到每帧都运行的效果，同时代码不必在Update中出现，具体见教程第28节17:46
7、可以用一个简单的MeshCollider套在外面进行碰撞检测，不一定要用原先的Mesh也可以获得比较精确的碰撞检测



在iPhone上使用XML的步骤（使用XMLParser的3个.cs文件）
1、TextAsset text = (TextAsset)Resources.Load("***");	***为resources文件夹下的XML文件
2、XMLParser parser = new XMLParser();XMLNode node = parser.Parse(text.text);	将读取到的XML文件传给解析器
之后调用相关API即可读取相关数据，有3种方法
1、node.GetValue("system1>0>item>0>@label")
2、node.GetNodeList("system1>0>item")	用foreach则可以遍历其中的所有子节点
foreach (XMLNode mynode in list)
	Debug.Log(mynode.GetValue("@label"));	可以在这里获得每个子节点的一个或多个属性值
3、node.GetNode("example>0>value>1")	获得某个节点
